// Generated by CoffeeScript 1.10.0

/*
 * to minify:
java -jar /usr/local/closure-compiler/compiler.jar \
  --compilation_level SIMPLE_OPTIMIZATIONS \
  --js github-widget.js \
  --js_output_file github-widget.min.js
 */


/** @preserve https://github.com/NateShoffner/github-widget
Modified work Copyright (c) 2016 Nate Shoffner
Original work Copyright (c) 2011 - 2012 George MacKerron
Released under the MIT licence: http://opensource.org/licenses/mit-license
 */

(function() {
  var cls, datetimeRegex, get, jsonp, make, makeWidget, text,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    hasProp = {}.hasOwnProperty;

  makeWidget = function(repos, div, opts) {
    var i, len, repo, results;
    make({
      cls: 'gw-clearer',
      prevSib: div
    });
    results = [];
    for (i = 0, len = repos.length; i < len; i++) {
      repo = repos[i];
      results.push(make({
        parent: div,
        cls: 'gw-repo-outer',
        kids: [
          make({
            cls: 'gw-repo',
            kids: [
              make({
                cls: 'gw-title',
                kids: [
                  make({
                    tag: 'ul',
                    cls: 'gw-stats',
                    kids: [
                      make({
                        tag: 'li',
                        text: repo.watchers,
                        cls: 'gw-watchers'
                      }), make({
                        tag: 'li',
                        text: repo.forks,
                        cls: 'gw-forks'
                      })
                    ]
                  }), make({
                    tag: 'a',
                    href: repo.html_url,
                    text: repo.name,
                    cls: 'gw-name'
                  })
                ]
              }), repo.language != null ? make({
                cls: 'gw-lang',
                text: repo.language
              }) : void 0, make({
                cls: 'gw-repo-desc',
                text: repo.description
              }), opts.show_homepages && !!repo.homepage ? make({
                cls: 'gw-homepage',
                kids: [
                  make({
                    tag: 'a',
                    href: repo.homepage,
                    text: 'Homepage'
                  })
                ]
              }) : void 0
            ]
          })
        ]
      }));
    }
    return results;
  };

  datetimeRegex = /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;

  this.initialize_github_widgets = function() {
    var div, i, len, ref, results;
    ref = get({
      tag: 'div',
      cls: 'github-widget'
    });
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      div = ref[i];
      results.push(initialize_github_widget(div));
    }
    return results;
  };

  this.initialize_github_widget = function(div) {
    return (function(div) {
      var i, len, limit, opts, repo_nodes, repos, results, sortBy, url, user, userCount, users;
      repo_nodes = div.getElementsByClassName('gw-repo-outer');
      while (repo_nodes[0]) {
        repo_nodes[0].parentNode.removeChild(repo_nodes[0]);
      }
      users = (div.getAttribute('data-user')).split(',');
      opts = div.getAttribute('data-options');
      opts = typeof opts === 'string' ? JSON.parse(opts) : {};
      sortBy = opts.sortBy || 'watchers';
      limit = parseInt(opts.limit) || Infinity;
      repos = [];
      userCount = 0;
      results = [];
      for (i = 0, len = users.length; i < len; i++) {
        user = users[i];
        url = "https://api.github.com/users/" + user + "/repos?callback=<cb>";
        results.push(jsonp({
          url: url,
          success: function(payload) {
            var first_repo, j, len1, ref, ref1, repo, siteRepoNames, userName;
            if (payload.data.length > 0) {
              first_repo = payload.data[0];
              userName = first_repo.owner.login;
              siteRepoNames = [(userName + ".github.com").toLowerCase(), (userName + ".github.io").toLowerCase()];
              ref = payload.data;
              for (j = 0, len1 = ref.length; j < len1; j++) {
                repo = ref[j];
                if ((!opts.forks && repo.fork) || (!opts.siterepos && (ref1 = repo.name.toLowerCase(), indexOf.call(siteRepoNames, ref1) >= 0)) || !repo.description) {
                  continue;
                }
                repos.push(repo);
              }
              userCount++;
              if (userCount === users.length && repos.length > 0) {
                if (datetimeRegex.test(repos[0][sortBy])) {
                  repos = repos.sort(function(a, b) {
                    return new Date(b[sortBy]) - new Date(a[sortBy]);
                  });
                } else {
                  repos = repos.sort(function(a, b) {
                    return b[sortBy] - a[sortBy];
                  });
                }
                repos = repos.slice(0, +(limit - 1) + 1 || 9e9);
                return makeWidget(repos, div, opts);
              }
            }
          }
        }));
      }
      return results;
    })(div);
  };

  cls = function(el, opts) {
    var c, classHash, classes, hasClasses, i, j, len, len1, ref;
    if (opts == null) {
      opts = {};
    }
    classHash = {};
    classes = el.className.match(cls.re);
    if (classes != null) {
      for (i = 0, len = classes.length; i < len; i++) {
        c = classes[i];
        classHash[c] = true;
      }
    }
    hasClasses = (ref = opts.has) != null ? ref.match(cls.re) : void 0;
    if (hasClasses != null) {
      for (j = 0, len1 = hasClasses.length; j < len1; j++) {
        c = hasClasses[j];
        if (!classHash[c]) {
          return false;
        }
      }
      return true;
    }
    return null;
  };

  cls.re = /\S+/g;

  get = function(opts) {
    var el, els, hasCls, inside, ref, ref1, ref2, ref3, tag;
    if (opts == null) {
      opts = {};
    }
    inside = (ref = opts.inside) != null ? ref : document;
    tag = (ref1 = opts.tag) != null ? ref1 : '*';
    if (opts.id != null) {
      return inside.getElementById(opts.id);
    }
    hasCls = opts.cls != null;
    if (hasCls && tag === '*' && (inside.getElementsByClassName != null)) {
      return inside.getElementsByClassName(opts.cls);
    }
    els = inside.getElementsByTagName(tag);
    if (hasCls) {
      els = (function() {
        var i, len, results;
        results = [];
        for (i = 0, len = els.length; i < len; i++) {
          el = els[i];
          if (cls(el, {
            has: opts.cls
          })) {
            results.push(el);
          }
        }
        return results;
      })();
    }
    if ((opts.multi == null) && (ref2 = tag.toLowerCase(), indexOf.call(get.uniqueTags, ref2) >= 0)) {
      return (ref3 = els[0]) != null ? ref3 : null;
    } else {
      return els;
    }
  };

  get.uniqueTags = 'html body frameset head title base'.split(' ');

  text = function(t) {
    return document.createTextNode('' + t);
  };

  make = function(opts) {
    var c, i, k, len, ref, t, v;
    if (opts == null) {
      opts = {};
    }
    t = document.createElement((ref = opts.tag) != null ? ref : 'div');
    for (k in opts) {
      if (!hasProp.call(opts, k)) continue;
      v = opts[k];
      switch (k) {
        case 'tag':
          continue;
        case 'parent':
          v.appendChild(t);
          break;
        case 'kids':
          for (i = 0, len = v.length; i < len; i++) {
            c = v[i];
            if (c != null) {
              t.appendChild(c);
            }
          }
          break;
        case 'prevSib':
          v.parentNode.insertBefore(t, v.nextSibling);
          break;
        case 'text':
          t.appendChild(text(v));
          break;
        case 'cls':
          t.className = v;
          break;
        default:
          t[k] = v;
      }
    }
    return t;
  };

  jsonp = function(opts) {
    var callbackName, ref, ref1, url;
    callbackName = (ref = opts.callback) != null ? ref : '_JSONPCallback_' + jsonp.callbackNum++;
    url = opts.url.replace('<cb>', callbackName);
    window[callbackName] = (ref1 = opts.success) != null ? ref1 : jsonp.noop;
    return make({
      tag: 'script',
      src: url,
      parent: get({
        tag: 'head'
      })
    });
  };

  jsonp.callbackNum = 0;

  jsonp.noop = function() {};

}).call(this);
